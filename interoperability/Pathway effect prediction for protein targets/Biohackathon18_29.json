{"paragraphs":[{"title":"GraphFrame dependency","text":"%dep\n\nz.load(\"graphframes:graphframes:0.6.0-spark2.3-s_2.11\")","user":"anonymous","dateUpdated":"2018-11-15T12:48:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@741965ff\n"}]},"apps":[],"jobName":"paragraph_1542133297758_-1618610958","id":"20181113-182137_918051425","dateCreated":"2018-11-13T18:21:37+0000","dateStarted":"2018-11-15T12:48:57+0000","dateFinished":"2018-11-15T12:49:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16125"},{"title":"Working directory","text":"%sh\n\nWORK_DIR=$(pwd)\necho \"My working directory is: \" $WORK_DIR","user":"anonymous","dateUpdated":"2018-11-15T12:49:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"My working directory is:  /home/rsaidi/programs/zeppelin/zeppelin-0.8.0-bin-all\n"}]},"apps":[],"jobName":"paragraph_1542109386633_-1190483097","id":"20181113-114306_1303436605","dateCreated":"2018-11-13T11:43:06+0000","dateStarted":"2018-11-15T12:49:33+0000","dateFinished":"2018-11-15T12:49:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16126"},{"title":"Download Human data from UniProt","text":"%sh\n\nURL=ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/taxonomic_divisions/uniprot_sprot_human.dat.gz\nTARGET=~/data/biohackathon18/human.dat.gz\nif [ ! -f $TARGET ]; then\n    wget $URL -O $TARGET\nfi\necho \"File save to $TARGET\"","user":"anonymous","dateUpdated":"2018-11-13T11:41:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542109064573_-1556324412","id":"20181113-113744_312783415","dateCreated":"2018-11-13T11:37:44+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16127"},{"title":"Download HPO data","text":"%sh\n\nURL=http://compbio.charite.de/jenkins/job/hpo.annotations.monthly/lastSuccessfulBuild/artifact/annotation/ALL_SOURCES_ALL_FREQUENCIES_genes_to_phenotype.txt\nTARGET=~/data/biohackathon18/hpo.dat.gz\nif [ ! -f $TARGET ]; then\n    wget $URL -O $TARGET\nfi\necho \"File save to $TARGET\"","user":"anonymous","dateUpdated":"2018-11-14T08:28:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542132629119_136889739","id":"20181113-181029_731457645","dateCreated":"2018-11-13T18:10:29+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16128"},{"title":"Download HPO data","text":"%sh\n\nURL=http://compbio.charite.de/jenkins/job/hpo.annotations.monthly/lastSuccessfulBuild/artifact/annotation/ALL_SOURCES_ALL_FREQUENCIES_genes_to_phenotype.txt\nTARGET=~/data/biohackathon18/hpo.dat.gz\nif [ ! -f $TARGET ]; then\n    wget $URL -O $TARGET\nfi\necho \"File save to $TARGET\"","user":"anonymous","dateUpdated":"2018-11-14T08:51:54+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542185514536_382322758","id":"20181114-085154_578619210","dateCreated":"2018-11-14T08:51:54+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16129"},{"title":"Download Intact data","text":"%sh\n\nURL=ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.zip\nTARGET=~/data/biohackathon18/intact.zip\nif [ ! -f $TARGET ]; then\n    wget $URL -O $TARGET\n    unzip $TARGET #Should give intact.txt and intact_negative.txt. For now we need intact.txt\nfi\necho \"File save to $TARGET\"","user":"anonymous","dateUpdated":"2018-11-14T09:59:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542186934038_926510282","id":"20181114-091534_1635988260","dateCreated":"2018-11-14T09:15:34+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16130"},{"title":"Set delimiter and load Intact data using SparkContext (sc)","text":"def notHeader(line: String): Boolean = {\n    return !line.startsWith(\"#\")\n}\n\ndef human(line: String): Boolean = {\n    val items = line.split(\"\\t\")\n    return (items(9).startsWith(\"taxid:9606\") && items(10).startsWith(\"taxid:9606\"))\n}\n\nsc.hadoopConfiguration.set(\"textinputformat.record.delimiter\",\"\\n\")\nval intactLines = (sc.textFile(\"../../../data/biohackathon18/intact.txt\")\n                      .sample(false, 1)\n                      .filter(notHeader)\n                      .filter(human))","user":"anonymous","dateUpdated":"2018-11-15T12:51:04+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"notHeader: (line: String)Boolean\nhuman: (line: String)Boolean\nintactLines: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[4] at filter at <console>:33\n"}]},"apps":[],"jobName":"paragraph_1542109293653_1569089347","id":"20181113-114133_1161141095","dateCreated":"2018-11-13T11:41:33+0000","dateStarted":"2018-11-15T12:51:04+0000","dateFinished":"2018-11-15T12:51:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16131"},{"title":"Protein-Protein edges","text":"def getProtProtEdge(line: String): (String, String, String) = {\n    val items = line.split(\"\\t\")\n    return (items(0).drop(10), items(1).drop(10), items(14).drop(15))\n}\nval protProtEdges = intactLines.map(getProtProtEdge).toDF(\"src\", \"dst\", \"link\")\nprotProtEdges.show","user":"anonymous","dateUpdated":"2018-11-15T12:51:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getProtProtEdge: (line: String)(String, String, String)\nprotProtEdges: org.apache.spark.sql.DataFrame = [src: string, dst: string ... 1 more field]\n+------+------+----+\n|   src|   dst|link|\n+------+------+----+\n|P49418|O43426|0.56|\n|P49418|O43426|0.56|\n|P49418|O43426|0.56|\n|P49418|O43426|0.56|\n|Q99961|O43426|0.44|\n|O43426|Q99961|0.44|\n|O43426|Q99961|0.44|\n|P49418|Q05193|0.77|\n|P49418|Q05193|0.77|\n|Q99961|Q05193|0.44|\n|Q99961|Q05193|0.44|\n|P49418|Q05193|0.77|\n|P50570|Q99961|0.35|\n|P49418|P50570|0.71|\n|Q9UQ16|P49418|0.35|\n|Q9UQ16|Q99961|0.35|\n|Q13643|Q14192|0.51|\n|Q13643|Q14192|0.51|\n|P42566|P42566|0.64|\n|P42566|P42566|0.64|\n+------+------+----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1542187811814_216397271","id":"20181114-093011_479649093","dateCreated":"2018-11-14T09:30:11+0000","dateStarted":"2018-11-15T12:51:20+0000","dateFinished":"2018-11-15T12:51:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16132","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.16.9.200:4040/jobs/job?id=0"],"interpreterSettingId":"spark"}}},{"title":"Set delimiter and load HPO data using SparkContext (sc)","text":"sc.hadoopConfiguration.set(\"textinputformat.record.delimiter\",\"\\n\")\nval hpoLines = (sc.textFile(\"../../../data/biohackathon18/hpo.txt\")\n                      .sample(false, 1)\n                      .filter(notHeader)\n                      .cache\n                      )","user":"anonymous","dateUpdated":"2018-11-14T12:38:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hpoLines: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[147] at filter at <console>:30\n"}]},"apps":[],"jobName":"paragraph_1542187256111_-1725091351","id":"20181114-092056_1392787733","dateCreated":"2018-11-14T09:20:56+0000","dateStarted":"2018-11-14T12:38:14+0000","dateFinished":"2018-11-14T12:38:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16133"},{"title":"Protein-HPO edges: preparing HPO","text":"def hpoGeneAsKey(line: String): (String, String) = {\n    val items = line.split(\"\\t\")\n    return (items(1), items(3))//if (foo) bar else baz\n}\n\nval hpoByGene = hpoLines.map(hpoGeneAsKey).reduceByKey((hpo1, hpo2) => hpo1 + \"##\" + hpo2)\nhpoByGene.first","user":"anonymous","dateUpdated":"2018-11-14T13:29:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hpoGeneAsKey: (line: String)(String, String)\nhpoByGene: org.apache.spark.rdd.RDD[(String, String)] = ShuffledRDD[151] at reduceByKey at <console>:31\nres172: (String, String) = (NEK8,HP:0001696-HP:0000800-HP:0001762-HP:0002980-HP:0000007-HP:0000105-HP:0002089-HP:0003826-HP:0001746-HP:0001395-HP:0003577-HP:0000090-HP:0001562-HP:0001660-HP:0004734-HP:0003774)\n"}]},"apps":[],"jobName":"paragraph_1542199004840_1474636523","id":"20181114-123644_654957413","dateCreated":"2018-11-14T12:36:44+0000","dateStarted":"2018-11-14T12:39:01+0000","dateFinished":"2018-11-14T12:39:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16134"},{"title":"Set delimiter and load Human data using SparkContext (sc)","text":"sc.hadoopConfiguration.set(\"textinputformat.record.delimiter\",\"\\n//\\n\")\nval uniprotTexts = (sc.textFile(\"../../../data/biohackathon18/human.dat.gz\")\n                      .sample(false, 1)\n                      .cache\n                      )","user":"anonymous","dateUpdated":"2018-11-15T12:52:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"uniprotTexts: org.apache.spark.rdd.RDD[String] = PartitionwiseSampledRDD[12] at sample at <console>:27\n"}]},"apps":[],"jobName":"paragraph_1542132686283_-774638788","id":"20181113-181126_1927529655","dateCreated":"2018-11-13T18:11:26+0000","dateStarted":"2018-11-15T12:52:16+0000","dateFinished":"2018-11-15T12:52:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16135"},{"text":"val p1 = uniprotTexts.first\nval geneRegex = \"GN   Name=.*\".r\nval rawGene = geneRegex.findFirstIn(p1).getOrElse(\"ERROR\")\nval gene = if(rawGene == \"ERROR\") rawGene else rawGene.substring(0, rawGene.indexOf(\";\")).drop(10).trim","user":"anonymous","dateUpdated":"2018-11-14T13:00:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"p1: String =\nID   1433B_HUMAN             Reviewed;         246 AA.\nAC   P31946; A8K9K2; E1P616;\nDT   01-JUL-1993, integrated into UniProtKB/Swiss-Prot.\nDT   23-JAN-2007, sequence version 3.\nDT   07-NOV-2018, entry version 213.\nDE   RecName: Full=14-3-3 protein beta/alpha;\nDE   AltName: Full=Protein 1054;\nDE   AltName: Full=Protein kinase C inhibitor protein 1;\nDE            Short=KCIP-1;\nDE   Contains:\nDE     RecName: Full=14-3-3 protein beta/alpha, N-terminally processed;\nGN   Name=YWHAB;\nOS   Homo sapiens (Human).\nOC   Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi;\nOC   Mammalia; Eutheria; Euarchontoglires; Primates; Haplorrhini;\nOC   Catarrhini; Hominidae; Homo.\nOX   NCBI_TaxID=9606;\nRN   [1]\nRP   NUCLEOTIDE SEQUENCE [MRNA].\nRC   TISSUE=Keratinocyte;\nRX   PubMed=8...geneRegex: scala.util.matching.Regex = GN   Name=.*\nrawGene: String = GN   Name=YWHAB;\ngene: String = YWHAB\n"}]},"apps":[],"jobName":"paragraph_1542200207116_-1798919345","id":"20181114-125647_1447815815","dateCreated":"2018-11-14T12:56:47+0000","dateStarted":"2018-11-14T13:00:44+0000","dateFinished":"2018-11-14T13:00:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16136"},{"title":"Protein-HPO edges: preparing UniProt data","text":"//Example 1: GN   Name=GOT2;\n//TODO: take gene synonyms into account\n//Example 2: GN   Name=FGFR2; Synonyms=BEK, KGFR, KSAM;\n//Example 3: GN   Name=CCDC115 {ECO:0000303|PubMed:26833332,\n//           GN   ECO:0000312|HGNC:HGNC:28178};\ndef protGeneAsKey(uniprotText: String): (String, String) = {\n    val geneRegex = \"GN   Name=.*\".r\n    val rawGene = geneRegex.findFirstIn(uniprotText).getOrElse(\"ERROR\")   \n    val pos1 = rawGene.indexOf(\";\")\n    val pos2 = rawGene.indexOf(\" {\")\n    val limit = if(pos1 != -1 && pos2 != -1 ) Math.min(pos1, pos2) else Math.max(Math.max(pos1, -1), Math.max(pos2, -1))\n    var gene: String = \"\"\n    // if(rawGene == \"ERROR\") gene = rawGene\n    // else if(!rawGene.contains(\";\")){\n    //     if(rawGene.contains(\" {\")) gene = \"BAD_FORMAT1\"\n    //      else if(!rawGene.contains(\" {\")) gene = \"BAD_FORMAT2\"\n    // } \n    \n    // else rawGene.substring(0, rawGene.indexOf(\";\")).drop(10).trim\n    \n    if(rawGene != \"ERROR\" && limit == -1) gene = \"BAD_FORMAT\"\n    else gene = if(rawGene == \"ERROR\") rawGene else rawGene.substring(0, limit).drop(10).trim\n    \n    val accRegex = \"AC   .*\".r\n    val rawAcc = accRegex.findFirstIn(uniprotText).getOrElse(\"ERROR\")\n    val acc = if(rawAcc == \"ERROR\") rawAcc else rawAcc.substring(0, rawAcc.indexOf(\";\")).drop(5).trim\n    \n    return (gene, acc)\n}\n\nval protByGene = (uniprotTexts.map(protGeneAsKey)\n                              .reduceByKey((prot1, prot2) => prot1 + \"##\" + prot2)\n                              .filter(x => x._1 !=\"BAD_FORMAT\")\n                              .filter(x => x._1 !=\"ERROR\")\n                              )\nprotByGene.first","user":"anonymous","dateUpdated":"2018-11-15T12:58:11+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"protGeneAsKey: (uniprotText: String)(String, String)\nprotByGene: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[16] at filter at <console>:33\nres17: (String, String) = (C11orf68,Q9H3H3)\n"}]},"apps":[],"jobName":"paragraph_1542192373404_60536156","id":"20181114-104613_1836140985","dateCreated":"2018-11-14T10:46:13+0000","dateStarted":"2018-11-15T12:58:11+0000","dateFinished":"2018-11-15T12:58:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16137","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.16.9.200:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}}},{"title":"Protein-HPO edges","text":"//Example 1: GN   Name=GOT2;\n//TODO: take gene synonyms into account\n//Example 2: GN   Name=FGFR2; Synonyms=BEK, KGFR, KSAM;\ndef protGeneAsKey(uniprotText: String): (String, String) = {\n    val geneRegex = \"GN   Name=.*\".r\n    val rawGene = geneRegex.findFirstIn(uniprotText).getOrElse(\"ERROR\")\n    val gene = if(rawGene == \"ERROR\") rawGene else rawGene.substring(0, rawGene.indexOf(\";\")).drop(10).trim\n    \n    val accRegex = \"AC   .*\".r\n    val rawAcc = accRegex.findFirstIn(uniprotText).getOrElse(\"ERROR\")\n    val acc = if(rawAcc == \"ERROR\") rawAcc else rawAcc.substring(0, rawAcc.indexOf(\";\")).drop(5).trim\n    \n    return (gene, acc)\n}\n\nval protByGene = uniprotTexts.map(protGeneAsKey).reduceByKey((prot1, prot2) => prot1 + \"-\" + prot2)\n\n","user":"anonymous","dateUpdated":"2018-11-14T12:37:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"protGeneAsKey: (uniprotText: String)(String, String)\nprotByGene: org.apache.spark.rdd.RDD[(String, String)] = ShuffledRDD[141] at reduceByKey at <console>:31\n"}]},"apps":[],"jobName":"paragraph_1542191041087_-1977240243","id":"20181114-102401_1202006222","dateCreated":"2018-11-14T10:24:01+0000","dateStarted":"2018-11-14T12:35:31+0000","dateFinished":"2018-11-14T12:35:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16138"},{"text":"\n\nval protByGene = uniprotTexts.map(protGeneAsKey).reduceByKey((prot1, prot2) => prot1 + \"-\" + prot2)\n\nval protHpoEdges = ((uniprotTexts.map(protGeneAsKey) ++ hpoLines.map(hpoGeneAsKey))\n                    //.reduceByKey\n                    //.toDF(\"src\", \"dst\", \"link\")\n                    )","user":"anonymous","dateUpdated":"2018-11-14T12:36:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542198913385_1949658376","id":"20181114-123513_332829264","dateCreated":"2018-11-14T12:35:13+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16139"},{"text":"hpoByGene.take(3).foreach(println)","user":"anonymous","dateUpdated":"2018-11-14T12:34:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1542198466417_115859095","id":"20181114-122746_1320427180","dateCreated":"2018-11-14T12:27:46+0000","dateStarted":"2018-11-14T12:34:29+0000","dateFinished":"2018-11-14T12:34:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16140"},{"text":"case class Protein(id: String, category: String, description: String)","user":"anonymous","dateUpdated":"2018-11-14T09:01:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542185889040_529100071","id":"20181114-085809_2134870384","dateCreated":"2018-11-14T08:58:09+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16141"},{"text":"case class Node(id: String, category: String, description: String)\n\ndef proteinToNode(uniprotText:  String): Node = {\n    var id: String = \"\"\n    var category: String = \"\"\n    var description: String = \"\"\n    \n    return Node(id, category, description)\n}","user":"anonymous","dateUpdated":"2018-11-13T18:30:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Node\nproteinToNode: (uniprotText: String)Node\n"}]},"apps":[],"jobName":"paragraph_1542132938995_-1464077769","id":"20181113-181538_1541612447","dateCreated":"2018-11-13T18:15:38+0000","dateStarted":"2018-11-13T18:30:25+0000","dateFinished":"2018-11-13T18:30:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16142"},{"text":"val proteinNodes = uniprotTexts.map(proteinToNode)","user":"anonymous","dateUpdated":"2018-11-13T18:26:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542133519578_-332175046","id":"20181113-182519_395191614","dateCreated":"2018-11-13T18:25:19+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:16143"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542286455692_-2051578157","id":"20181115-125415_321268979","dateCreated":"2018-11-15T12:54:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17929","text":"import org.graphframes._\n\nval v = protByGene.map(x => (x._2, x._1)).toDF(\"id\", \"gene\")\nval e = protProtEdges\nval g = GraphFrame(v, e)","dateUpdated":"2018-11-15T13:01:03+0000","dateFinished":"2018-11-15T13:00:27+0000","dateStarted":"2018-11-15T13:00:26+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.graphframes._\nv: org.apache.spark.sql.DataFrame = [id: string, gene: string]\ne: org.apache.spark.sql.DataFrame = [src: string, dst: string ... 1 more field]\ng: org.graphframes.GraphFrame = GraphFrame(v:[id: string, gene: string], e:[src: string, dst: string ... 1 more field])\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542286647440_1574042982","id":"20181115-125727_2067397883","dateCreated":"2018-11-15T12:57:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18101","text":"val chain4 = g.find(\"(a)-[ab]->(b); (b)-[bc]->(c); (c)-[cd]->(d)\")\nchain4.show","dateUpdated":"2018-11-15T13:03:36+0000","dateFinished":"2018-11-15T13:08:20+0000","dateStarted":"2018-11-15T13:03:36+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"chain4: org.apache.spark.sql.DataFrame = [a: struct<id: string, gene: string>, ab: struct<src: string, dst: string ... 1 more field> ... 5 more fields]\n+-------------------+--------------------+-------------------+--------------------+------------------+--------------------+-------------------+\n|                  a|                  ab|                  b|                  bc|                 c|                  cd|                  d|\n+-------------------+--------------------+-------------------+--------------------+------------------+--------------------+-------------------+\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [O43707, ACTN4]|[O43707, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [O43707, ACTN4]|[O43707, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [Q13043, STK4]|[Q13043, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [Q13043, STK4]|[Q13043, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [Q8TAM6, ERMN]|[Q8TAM6, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|    [P41145, OPRK1]|[P41145, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [Q8TAM6, ERMN]|[Q8TAM6, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [O00410, IPO5]|[O00410, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n| [Q2LD37, KIAA1109]|[Q2LD37, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [O00410, IPO5]|[O00410, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n| [Q2LD37, KIAA1109]|[Q2LD37, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|     [O00410, IPO5]|[O00410, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n| [Q2LD37, KIAA1109]|[Q2LD37, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9H0R8, ...|[Q9H0R8, GABARAPL1]|[Q9H0R8, Q9NT62, ...|    [Q9NT62, ATG3]|[Q9NT62, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n| [Q2LD37, KIAA1109]|[Q2LD37, P35222, ...|   [P35222, CTNNB1]|[P35222, Q9GZQ8, ...|[Q9GZQ8, MAP1LC3B]|[Q9GZQ8, A6NCE7, ...|[A6NCE7, MAP1LC3B2]|\n+-------------------+--------------------+-------------------+--------------------+------------------+--------------------+-------------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.16.9.200:4040/jobs/job?id=4"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542286880083_-644429713","id":"20181115-130120_1600684092","dateCreated":"2018-11-15T13:01:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18339","text":"// import org.apache.spark.graphx._\nimport scala.reflect.ClassTag\n\ndef [vertices:ClassTag,relations:ClassTag](g:GraphFrame) = {\n    val u = java.util.UUID.randomUUID\n    val v = g.vertices.select(\"id\")\n    val vertexes: Array[String] = g.vertices.select(\"id\").rdd.map(x => x(0).toString).collect()\n    val edges: Array[Array[String]] = g.edges.select(\"src\", \"dst\").rdd.map(r => Array(r(0).toString, r(1).toString)).collect()\n    val edgeCreation = edges.map{ edgeArray => \"{source:nodes[\"+ vertexes.indexOf(edgeArray(0).trim()) +\"],target:nodes[\"+ vertexes.indexOf(edgeArray(1).trim())+\"]}\"}\n    \n    println(\"\"\"\n    <!DOCTYPE html>\n     <html lang=\"en\">\n     <head>\n     <meta charset=\"utf-8\">\n     <title>Graph</title>\n     <div id='a\"\"\" + u + \"\"\"' style='width:960px; height:500px'></div>\n    <style>\n    .node circle { fill: gray; }\n    .node text { font: 10px sans-serif;        \n    text-anchor: middle;\n    fill: white; }\n    line.link { stroke: gray;\n    stroke-width: 1.5px; }\n    </style>\n    <script src=\"https://d3js.org/d3.v3.min.js\"></script>\n    </head>\n    <body>\n    <script>\n    var width = 960, height = 500;\n    var svg = d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\")\n    .attr(\"width\", width).attr(\"height\", height);\n    var nodes = [\"\"\" + vertexes.map(\"{id:\\\"\" + _ + \"\\\"}\").mkString(\",\") + \"\"\"];\n    var links = [\"\"\"+ edgeCreation.mkString(\",\") + \"\"\"];\n    var link = svg.selectAll(\".link\").data(links);\n    link.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n    var node = svg.selectAll(\".node\").data(nodes);\n    var nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\")\n    nodeEnter.append(\"circle\").attr(\"r\", 8);\n    nodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\n     .text(function(d) { return d.id; });\n    d3.layout.force().linkDistance(50).charge(-200).chargeDistance(300)\n    .friction(0.95).linkStrength(0.5).size([width, height])\n    .on(\"tick\", function() {\n    link.attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n    node.attr(\"transform\", function(d) {\n    return \"translate(\" + d.x + \",\" + d.y + \")\";\n    });\n    }).nodes(nodes).links(links).start();\n    </script>\n    </body>\n    </html>\n     \"\"\")\n}","dateUpdated":"2018-11-15T13:27:33+0000","dateFinished":"2018-11-15T13:27:08+0000","dateStarted":"2018-11-15T13:27:07+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.reflect.ClassTag\ndrawGraph: [vertices, relations](g: org.graphframes.GraphFrame)(implicit evidence$1: scala.reflect.ClassTag[vertices], implicit evidence$2: scala.reflect.ClassTag[relations])Unit\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542288096316_-150142432","id":"20181115-132136_1564527567","dateCreated":"2018-11-15T13:21:36+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18710","text":"drawGraph(g)","dateUpdated":"2018-11-15T13:27:39+0000","dateFinished":"2018-11-15T13:27:43+0000","dateStarted":"2018-11-15T13:27:39+0000","errorMessage":"org.apache.thrift.transport.TTransportException\n\tat org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)\n\tat org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)\n\tat org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:274)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:258)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:233)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:229)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:228)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:437)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"org.apache.thrift.transport.TTransportException\n\tat org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)\n\tat org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)\n\tat org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:274)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:258)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:233)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:229)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:228)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:437)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.16.9.200:4040/jobs/job?id=5","http://172.16.9.200:4040/jobs/job?id=6"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542288459458_855088010","id":"20181115-132739_420131124","dateCreated":"2018-11-15T13:27:39+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18877"}],"name":"Biohackathon18/29","id":"2DWE61U9T","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"neo4j:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}